.\" (c) Copyright 2022 Richard W. Marinelli
.\"
.\" This work is licensed under the GNU General Public License (GPLv3).  To view a copy of this license, see the
.\" "License.txt" file included with this distribution or visit http://www.gnu.org/licenses/gpl-3.0.en.html.
.\"
.ad l
.TH SPLIT 3 2022-06-04 "Ver. 1.1.0" "CXL Library Documentation"
.nh \" Turn off hyphenation.
.SH NAME
\fBsplit\fR - split a string into an array of substrings.
.SH SYNOPSIS
\fB#include "cxl/string.h"\fR
.HP 2
\fBStrArray *split(short delim, char *src, int limit);\fR
.SH DESCRIPTION
The \fBsplit\fR() function
splits string \fIsrc\fR into an array of substrings using delimiter \fIdelim\fR and limit value \fIlimit\fR.
Substrings are separated by either a single 8-bit character, white space, or no delimiter, as indicated by the
integer value in \fIdelim\fR, as follows (with values shown in hexadecimal):
.PP
.RS 4
.PD 0
.IP \fBVALUE\fR 14
\fBMEANING\fR
.IP 0\~or\~'\~' 14
Delimiter is white space.  One or more of the characters ' ', '\et', '\en', '\er', '\ef', '\ev' in sequence are treated
as a single delimiter.  Additionally, if the delimiter is ' ', leading white space in the source string is ignored.
.IP 1\~-\~0xFF 14
8-bit value of a character to use as the delimiter, except ' ' (0x20).
.IP >\~0xFF 14
No delimiter defined.  A single-element array is returned containing the original string in \fIsrc\fR, unmodified.
.PD
.RE
.PP
The integer value in \fIlimit\fR controls the splitting process, as follows:
.PP
.RS 4
.PD 0
.IP \fBVALUE\fR 14
\fBMEANING\fR
.IP <\~0 14
Each delimiter found is significant and delineates two substrings, either or both of which may be a null string.
.IP 0 14
Trailing null substrings are ignored; that is, not included in the array.
.IP >\~0 14
Maximum number of array elements to return.
.PD
.RE
.PP
Note that if the limit value is greater than zero, the last element of the array will contain embedded
delimiter(s) if the number of delimiters in the string is equal to or greater than the limit.
.PP
Delimiters in the source string are replaced by null characters as the
string is parsed, hence the source string will be modified by this routine if any delimiters are found.
Pointers to the substrings are saved in a \fBStrArray\fR record, which is defined as follows:
.PP
.RS 4
.nf
typedef struct {
.RS 4
uint itemCount;
char *items[1];
} StrArray;
.fi
.RE
.RE
.PP
The \fIitems\fR member is an array of length \fIitemCount\fR + 1.  It will contain pointers to
each substring that was found, plus an additional pointer set to NULL, to indicate end-of-array.
.SH EXAMPLES
The following code fragment splits a string and writes the substrings to standard output.
.nf
.ta 4 8 12
.sp
char str[] = "  red, white, \et\enand_blue ";
StrArray *arr;
.sp
if((arr = split(' ', str, 0)) == NULL) {
.sp
	// Handle exception.
	...
	}
else {
	char **substr = arr->items;
	while(*substr != NULL) {
		printf("%s\en", *substr);
		++substr;
		}
.sp
	// Release storage for StrArray object and array inside of it.
	free((void *) arr);
	}
.fi
.SH RETURN VALUES
If successful, \fBsplit\fR() returns a pointer to the \fBStrArray\fR object that was created.
This pointer should be passed to free(3) to release the allocated storage when it is no
longer needed.
.PP
The function returns NULL on failure, and sets an exception code and message in
the CXL Exception System to indicate the error.
.SH SEE ALSO
ajoin(3), asplit(3), cxl(3), excep(3), free(3), join(3)
